-- all usual toy examples:

id[T](x:T):T = x			-- also without any types

map(f,[])    = []
map(f,[h|t]) = [f(h)|map(f,t)]

append([],y)    = y
append([h|t],y) = [h|append(t,y)]

filter(_,[])    = []
filter(p,[h|t]) = p(h) -> [h|filter(p,t)] | filter(p,t)

qsort([],_)     = []
qsort([h|t],lt) = append(qsort(filter(lambda(x) = lt(x,h),t),lt),
                      [h|qsort(filter(lambda(x) = not lt(x,h),t),lt)])

square(x) = x*x

fac(0) = 1
fac(n) = n<0 -> 0			-- raise illegal_arg
       | n*fac(n-1)

stack[T]() = self where
  d = []
  isempty() = d=[]
  push(x:T) do d:=[x|d]
  pop():T = d | []    -> nil		-- raise stack_empty
              | [h|t] -> h do d:=t

main() do
  print_list(map(lambda(x) = x*x,append([1,2,3],[4,5,6]))); lf()
  `s=stack()
  s.push(123)				-- thus stack[int]
  s.push(456)
  s.push(789)
  print_list(s.d); lf()			-- access private data! gna!
  print_int(s.pop()); lf()
  print_int(fac(7)); lf()
  print_list(filter(lambda(x) = x>3,[6,4,3,5,2,7,1])); lf()
  print_list(qsort([6,4,3,5,2,7,1],lambda(x,y) = x<y)); lf()



-- some on the fly printing code
-- included directly here because of missing module system

stdout():int extern
stdin():int extern
stderr():int extern
putc(c:int,file:int):int extern
getc(file:int):int extern
strcmp(a:string,b:string):bool extern
puts(s:string,file:int):int extern

putslf(s) do
  puts(s,stdout())
  lf()

putchar(c) do putc(c,stdout())

print_int(x) do
  x<10 -> putchar(x+"0")
        | do print_int(x/10)
             print_int(x-((x/10)*10))

print_list(x) do
  putchar("[")
  print_rest(x)
  putchar("]")

print_rest([]) do nil			-- we don't have a nop ;-)
print_rest([x]) do print_int(x)
print_rest([h|t]) do
  print_int(h)
  putchar(",")
  print_rest(t)

lf() do putchar(10)

